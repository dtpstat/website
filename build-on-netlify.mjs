// @ts-check
/* eslint-disable no-console */

/*
 * This script contains workarounds for Netlify environment variables. It transforms
 * variables available at build time and writes them into a dotenv file.
 * This file is then read by Next.js both at build time and run time.
 *
 * The script is launched via netlify.toml.
 */

import { execa } from "execa";
import fs from "node:fs";

/** @type {Record<string, string>} */
const envToWrite = {};

/*
 * Deploy previews and production release require different AUTH0_BASE_URL.
 * We cannot set this variable dynamically in the Netlify UI, So we define
 * it based on system variables available at build time:
 * https://docs.netlify.com/configure-builds/environment-variables/#read-only-variables
 */

if (process.env.AUTH0_BASE_URL) {
  throw new Error(
    `Did not expect AUTH0_BASE_URL to be defined (=${process.env.AUTH0_BASE_URL}). Please remove it from Netlify UI or delete this code.`,
  );
}

envToWrite["AUTH0_BASE_URL"] =
  process.env.CONTEXT === "deploy-preview"
    ? process.env.DEPLOY_PRIME_URL
    : process.env.URL;

if (!envToWrite["AUTH0_BASE_URL"]) {
  throw new Error(
    "Did not expect generated AUTH0_BASE_URL to be empty. Please check the values of CONTEXT / DEPLOY_PRIME_URL / URL.",
  );
}

/*
 * Write all defined variables into a dotenv file
 */

const dotenvFilePath = ".env.production.local";

if (fs.existsSync(dotenvFilePath)) {
  throw new Error(
    `Did not expect ${dotenvFilePath} to exist. Please delete it and make sure it is ignored by git.`,
  );
}

const serializedEnvToWrite = Object.entries(envToWrite)
  .map(([key, value]) => `${key}=${value}\n`)
  .join("");

fs.writeFileSync(
  dotenvFilePath,
  `## Generated by ./prepare-netlify-dotenv.mjs\n\n${serializedEnvToWrite}`,
);

if (
  process.env.PRODUCTION_REDIRECT_DESTINATION &&
  (process.env.CONTEXT === "production" ||
    true) /* ðŸš¨ ðŸš¨ ðŸš¨ remove before merging */
) {
  console.log("!!!!");

  /**  @type import("next").NextConfig */
  const noopNextConfig = {
    pageExtensions: ["non-existing"],

    eslint: { ignoreDuringBuilds: true },
    typescript: { ignoreBuildErrors: true },

    redirects: async () => [
      {
        source: "/:path*",
        destination: process.env.PRODUCTION_REDIRECT_DESTINATION,
        permanent: false,
      },
    ],
  };

  fs.writeFileSync("next.config.js", JSON.stringify(noopNextConfig), "utf-8");
}

// @ts-expect-error -- false-positive top-level await call is reported by VSCodeâ€™s tsc (needs investigation)
await execa("next", ["build"], { stdio: "inherit" });
